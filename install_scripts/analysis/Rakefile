require 'rake_pipeline'
require 'sent/main'
require 'rbbt/sources/organism'
require 'progress-monitor'

include Rake::Pipeline


def org_description(org, associations)
  name = Organism.name(org)
  supported_ids = Organism.supported_ids(org, :examples => true)

  <<-EOT
Name: #{ name }
Organism: #{ name }
Description: #{associations.values.flatten.length} associations for #{associations.keys.length} genes and #{associations.values.flatten.uniq.length} articles
ID Format: #{supported_ids.collect{|p| "#{ p[0] } (#{ p[1] })"}.join(", ")}
  EOT
end


desc "Find gene mentions in text"
step_def :mentions do
  
  associations = Sent.mentions(job_name)

  associations.collect {|code, pmids| "%s\t%s" % [code, pmids.uniq.join('|')] } * "\n"
end

desc "Join gene mention associations, entrez GeneRif associations, and GO associations" 
step_def :associations do |t|
  associations = Open.to_hash(StringIO.new(input), :flatten => true)

  associations.merge!(Organism.gene_literature(job_name))
  associations.merge!(Organism.gene_literature_go(job_name))

  File.open(t.name + '.description', 'w') do |f| f.puts org_description(job_name, associations) end

  associations.collect {|code, pmids| "%s\t%s" % [code, pmids.uniq.join('|')] } * "\n"
end

desc "Build dictionary"
step_def :dictionary do |t|
  associations = Open.to_hash(StringIO.new(input), :flatten => true)

  Progress.monitor("Building dictionary for #{job_name}")
  term_weights, stems = Sent.dictionary(associations)

  File.open(t.name + '.stems', 'w') do |f| f.puts stems.collect{|stem, words| "%s\t%s" % [stem, words.join("|")] } end

  term_weights.collect {|term, weight| "%s\t%s" % [term, weight] } * "\n"
end

desc "Build metadocument"
step_def :metadoc do
  terms = input.collect{|l| l.split("\t").first}
  associations = Open.to_hash(StringIO.new(input(:associations)), :flatten => true)

  Progress.monitor("Building metadoc for #{job_name}")
  Sent.metadoc(associations, terms)
end

desc "Selecting gene metadocs"
step_def :matrix, [] do |t|
  $org          ||= ENV['organism']
  $genes        ||= STDIN.read.split(/\n/)
  $metadoc_dir  ||= step_dir(:metadoc)

  metadoc_file = File.join($metadoc_dir, $org)

  Sent.matrix(metadoc_file, $genes)
end

desc "Performing NMF factorization"
step_def :NMF do |t|
  $factors   ||= ENV['factors']
  Sent.NMF(input, t.name, $factors.to_i)
end


desc "Analyze results"
step_def :summary do 
  $factors   ||= ENV['factors']
  Sent.analyze(input_filename, output_filename, $factors)
end


task 'all' do

  Progress.monitor("Processing organisms", :announcement => Proc.new{|org| "Organism #{ org }" }, :stack_depth => 0)
  Organism.all.each do |org|
    Rake::Task[File.join('metadoc',org)].invoke
  end

end

task 'default' => 'all'
